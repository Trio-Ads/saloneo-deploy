const fs = require('fs');

console.log('üîç TEST COMPLET - TOUS LES S√âLECTEURS DE LANGUE');
console.log('============================================================\n');

// 1. V√âRIFICATION DE TOUS LES S√âLECTEURS DE LANGUE
console.log('üìã √âTAPE 1: V√âRIFICATION DES S√âLECTEURS DE LANGUE');
console.log('------------------------------------------------------------');

const languageSelectors = [
  {
    name: 'LanguageSelector.tsx',
    path: 'src/components/LanguageSelector.tsx',
    description: 'S√©lecteur principal (pages internes)'
  },
  {
    name: 'AuthLanguageSelector.tsx',
    path: 'src/components/AuthLanguageSelector.tsx',
    description: 'S√©lecteur pour pages d\'authentification'
  },
  {
    name: 'NavbarLanguageSelector.tsx',
    path: 'src/components/NavbarLanguageSelector.tsx',
    description: 'S√©lecteur dans la barre de navigation'
  }
];

const expectedLanguages = [
  { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
  { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
  { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
  { code: 'ber', name: 'Tamazight', flag: 'üè¥' }
];

let allSelectorsValid = true;

languageSelectors.forEach(selector => {
  console.log(`\nüîç V√©rification: ${selector.name}`);
  console.log(`   ${selector.description}`);
  
  if (fs.existsSync(selector.path)) {
    const content = fs.readFileSync(selector.path, 'utf8');
    
    // V√©rifier chaque langue
    expectedLanguages.forEach(lang => {
      const pattern = new RegExp(`code: '${lang.code}'.*name: '${lang.name.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'.*flag: '${lang.flag.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'`);
      
      if (content.includes(`code: '${lang.code}'`) && content.includes(`name: '${lang.name}'`) && content.includes(`flag: '${lang.flag}'`)) {
        console.log(`   ‚úÖ ${lang.flag} ${lang.name} (${lang.code})`);
      } else {
        console.log(`   ‚ùå ${lang.flag} ${lang.name} (${lang.code}) - MANQUANT`);
        allSelectorsValid = false;
      }
    });
    
    // V√©rifier le nombre total de langues
    const languageMatches = content.match(/code: '[a-z]+'/g);
    if (languageMatches && languageMatches.length === expectedLanguages.length) {
      console.log(`   ‚úÖ Nombre correct de langues: ${languageMatches.length}`);
    } else {
      console.log(`   ‚ùå Nombre incorrect de langues: ${languageMatches ? languageMatches.length : 0} (attendu: ${expectedLanguages.length})`);
      allSelectorsValid = false;
    }
    
  } else {
    console.log(`   ‚ùå Fichier non trouv√©: ${selector.path}`);
    allSelectorsValid = false;
  }
});

// 2. V√âRIFICATION DE LA CONFIGURATION I18N
console.log('\nüìã √âTAPE 2: V√âRIFICATION CONFIGURATION I18N');
console.log('------------------------------------------------------------');

const i18nPath = 'src/i18n.ts';
if (fs.existsSync(i18nPath)) {
  const i18nContent = fs.readFileSync(i18nPath, 'utf8');
  
  console.log('üîç Configuration i18n:');
  
  // V√©rifier le type Language
  if (i18nContent.includes("'fr' | 'en' | 'ar' | 'es' | 'tr' | 'pt' | 'ber'")) {
    console.log('   ‚úÖ Type Language complet avec berb√®re');
  } else {
    console.log('   ‚ùå Type Language incomplet');
    allSelectorsValid = false;
  }
  
  // V√©rifier supportedLngs
  if (i18nContent.includes("supportedLngs: ['fr', 'en', 'ar', 'es', 'tr', 'pt', 'ber']")) {
    console.log('   ‚úÖ supportedLngs inclut le berb√®re');
  } else {
    console.log('   ‚ùå supportedLngs ne contient pas le berb√®re');
    allSelectorsValid = false;
  }
  
} else {
  console.log('‚ùå Fichier i18n.ts non trouv√©');
  allSelectorsValid = false;
}

// 3. V√âRIFICATION DES FICHIERS JSON BERB√àRES
console.log('\nüìã √âTAPE 3: V√âRIFICATION FICHIERS JSON BERB√àRES');
console.log('------------------------------------------------------------');

const berberDir = 'public/locales/ber';
const expectedFiles = [
  'auth.json', 'common.json', 'dashboard.json', 'services.json',
  'clients.json', 'team.json', 'appointments.json', 'interface.json',
  'profile.json', 'public.json', 'marketing.json', 'subscription.json', 'errors.json'
];

let berberFilesValid = true;
let totalBerberKeys = 0;

expectedFiles.forEach(file => {
  const filePath = `${berberDir}/${file}`;
  if (fs.existsSync(filePath)) {
    try {
      const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      const keyCount = countKeys(content);
      totalBerberKeys += keyCount;
      console.log(`   ‚úÖ ${file} - ${keyCount} cl√©s`);
    } catch (e) {
      console.log(`   ‚ùå ${file} - JSON invalide`);
      berberFilesValid = false;
    }
  } else {
    console.log(`   ‚ùå ${file} - Manquant`);
    berberFilesValid = false;
  }
});

function countKeys(obj) {
  let count = 0;
  for (let key in obj) {
    if (typeof obj[key] === 'object' && obj[key] !== null) {
      count += countKeys(obj[key]);
    } else {
      count++;
    }
  }
  return count;
}

console.log(`\nüìä Total: ${totalBerberKeys} traductions berb√®res`);

// 4. TEST DE COH√âRENCE ENTRE S√âLECTEURS
console.log('\nüìã √âTAPE 4: TEST DE COH√âRENCE ENTRE S√âLECTEURS');
console.log('------------------------------------------------------------');

const selectorContents = {};
languageSelectors.forEach(selector => {
  if (fs.existsSync(selector.path)) {
    selectorContents[selector.name] = fs.readFileSync(selector.path, 'utf8');
  }
});

// V√©rifier que tous les s√©lecteurs ont les m√™mes langues
const languageCodes = expectedLanguages.map(lang => lang.code);
let consistencyValid = true;

languageCodes.forEach(code => {
  const selectorsWithLang = [];
  Object.entries(selectorContents).forEach(([name, content]) => {
    if (content.includes(`code: '${code}'`)) {
      selectorsWithLang.push(name);
    }
  });
  
  if (selectorsWithLang.length === Object.keys(selectorContents).length) {
    console.log(`   ‚úÖ ${code.toUpperCase()} pr√©sent dans tous les s√©lecteurs`);
  } else {
    console.log(`   ‚ùå ${code.toUpperCase()} manquant dans: ${Object.keys(selectorContents).filter(name => !selectorsWithLang.includes(name)).join(', ')}`);
    consistencyValid = false;
  }
});

// 5. INSTRUCTIONS DE TEST MANUEL
console.log('\nüìã √âTAPE 5: INSTRUCTIONS DE TEST MANUEL');
console.log('------------------------------------------------------------');

console.log('üß™ Pour tester manuellement le support berb√®re:');
console.log('1. D√©marrer l\'application: npm run dev');
console.log('2. Tester sur la page de connexion:');
console.log('   - V√©rifier la pr√©sence du s√©lecteur en haut √† droite');
console.log('   - Cliquer et v√©rifier "Tamazight üè¥" dans la liste');
console.log('3. Tester dans l\'application principale:');
console.log('   - Se connecter et v√©rifier le s√©lecteur dans la navbar');
console.log('   - Tester le s√©lecteur dans les param√®tres d\'interface');
console.log('4. V√©rifier la traduction:');
console.log('   - S√©lectionner le berb√®re et v√©rifier que l\'interface change');
console.log('   - V√©rifier la persistance apr√®s rechargement');

// 6. RAPPORT FINAL
console.log('\nüìä RAPPORT FINAL');
console.log('============================================================');

if (allSelectorsValid && berberFilesValid && consistencyValid) {
  console.log('üéâ TOUS LES S√âLECTEURS DE LANGUE SONT √Ä JOUR !');
  console.log('');
  console.log('‚úÖ V√âRIFICATIONS R√âUSSIES:');
  console.log('‚Ä¢ 3 s√©lecteurs de langue mis √† jour');
  console.log('‚Ä¢ 7 langues support√©es (FR, EN, AR, ES, PT, TR, BER)');
  console.log('‚Ä¢ Configuration i18n compl√®te');
  console.log('‚Ä¢ 13 fichiers JSON berb√®res cr√©√©s');
  console.log(`‚Ä¢ ${totalBerberKeys} traductions berb√®res disponibles`);
  console.log('‚Ä¢ Coh√©rence entre tous les s√©lecteurs');
  console.log('');
  console.log('üåç LANGUES SUPPORT√âES:');
  expectedLanguages.forEach(lang => {
    console.log(`   ${lang.flag} ${lang.name} (${lang.code.toUpperCase()})`);
  });
  console.log('');
  console.log('üöÄ STATUT: SUPPORT BERB√àRE ENTI√àREMENT FONCTIONNEL');
  console.log('');
  console.log('üí° IMPACT:');
  console.log('‚Ä¢ Saloneo devient l\'une des rares plateformes SaaS en berb√®re');
  console.log('‚Ä¢ Acc√®s √† 25-30 millions de berb√©rophones');
  console.log('‚Ä¢ Avantage concurrentiel majeur en Afrique du Nord');
  console.log('‚Ä¢ Soutien √† la pr√©servation de la langue amazighe');
  
} else {
  console.log('‚ùå PROBL√àMES D√âTECT√âS');
  console.log('');
  if (!allSelectorsValid) {
    console.log('‚Ä¢ Certains s√©lecteurs de langue sont incomplets');
  }
  if (!berberFilesValid) {
    console.log('‚Ä¢ Fichiers JSON berb√®res manquants ou invalides');
  }
  if (!consistencyValid) {
    console.log('‚Ä¢ Incoh√©rences entre les s√©lecteurs');
  }
  console.log('');
  console.log('üîß ACTIONS REQUISES:');
  console.log('‚Ä¢ V√©rifier et corriger les s√©lecteurs mentionn√©s ci-dessus');
  console.log('‚Ä¢ Relancer le test apr√®s corrections');
}

console.log('\n============================================================');
console.log('üè¥ TEST COMPLET DES S√âLECTEURS DE LANGUE TERMIN√â');
