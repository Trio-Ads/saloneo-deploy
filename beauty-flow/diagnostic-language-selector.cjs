const fs = require('fs');
const path = require('path');

console.log('üîç DIAGNOSTIC COMPLET DU S√âLECTEUR DE LANGUE');
console.log('============================================================\n');

// 1. V√©rifier la configuration i18n
console.log('üìã 1. V√âRIFICATION DE LA CONFIGURATION I18N');
console.log('------------------------------------------------------------');

const i18nPath = 'src/i18n.ts';
if (fs.existsSync(i18nPath)) {
  const i18nContent = fs.readFileSync(i18nPath, 'utf8');
  
  console.log('‚úÖ Fichier i18n.ts trouv√©');
  
  // V√©rifier fallbackLng
  if (i18nContent.includes("fallbackLng: 'fr'")) {
    console.log('‚úÖ fallbackLng configur√© sur "fr"');
  } else {
    console.log('‚ùå fallbackLng non configur√© ou incorrect');
  }
  
  // V√©rifier supportedLngs
  if (i18nContent.includes("supportedLngs: ['fr', 'en', 'ar', 'es', 'tr', 'pt']")) {
    console.log('‚úÖ supportedLngs configur√© avec toutes les langues');
  } else {
    console.log('‚ùå supportedLngs incomplet ou incorrect');
  }
  
  // V√©rifier useSuspense
  if (i18nContent.includes('useSuspense: true')) {
    console.log('‚ö†Ô∏è  useSuspense: true (peut causer des probl√®mes de re-render)');
  } else {
    console.log('‚úÖ useSuspense: false ou non d√©fini');
  }
  
  // V√©rifier detection order
  if (i18nContent.includes("order: ['localStorage', 'navigator']")) {
    console.log('‚úÖ Ordre de d√©tection: localStorage puis navigator');
  } else {
    console.log('‚ùå Ordre de d√©tection non configur√© correctement');
  }
  
  // V√©rifier localStorage key
  if (i18nContent.includes("lookupLocalStorage: 'beauty-flow-language'")) {
    console.log('‚úÖ Cl√© localStorage configur√©e: beauty-flow-language');
  } else {
    console.log('‚ùå Cl√© localStorage non configur√©e');
  }
  
  // V√©rifier namespace auth
  if (i18nContent.includes("'auth'")) {
    console.log('‚úÖ Namespace "auth" inclus dans la configuration');
  } else {
    console.log('‚ùå Namespace "auth" manquant');
  }
  
} else {
  console.log('‚ùå Fichier i18n.ts non trouv√©');
}

console.log('\nüìã 2. V√âRIFICATION DU COMPOSANT LANGUAGESELECTOR');
console.log('------------------------------------------------------------');

const languageSelectorPath = 'src/components/LanguageSelector.tsx';
if (fs.existsSync(languageSelectorPath)) {
  const selectorContent = fs.readFileSync(languageSelectorPath, 'utf8');
  
  console.log('‚úÖ Composant LanguageSelector trouv√©');
  
  // V√©rifier useTranslation
  if (selectorContent.includes('useTranslation')) {
    console.log('‚úÖ Hook useTranslation utilis√©');
  } else {
    console.log('‚ùå Hook useTranslation manquant');
  }
  
  // V√©rifier i18n.changeLanguage
  if (selectorContent.includes('i18n.changeLanguage')) {
    console.log('‚úÖ Fonction i18n.changeLanguage utilis√©e');
  } else {
    console.log('‚ùå Fonction i18n.changeLanguage manquante');
  }
  
  // V√©rifier les langues support√©es
  const languages = ['fr', 'en', 'ar', 'es', 'pt', 'tr'];
  let allLanguagesFound = true;
  languages.forEach(lang => {
    if (!selectorContent.includes(`'${lang}'`)) {
      console.log(`‚ùå Langue ${lang} manquante dans le s√©lecteur`);
      allLanguagesFound = false;
    }
  });
  if (allLanguagesFound) {
    console.log('‚úÖ Toutes les langues pr√©sentes dans le s√©lecteur');
  }
  
  // V√©rifier les √©v√©nements
  if (selectorContent.includes('onClick') || selectorContent.includes('handleLanguageChange')) {
    console.log('‚úÖ Gestionnaires d\'√©v√©nements pr√©sents');
  } else {
    console.log('‚ùå Gestionnaires d\'√©v√©nements manquants');
  }
  
} else {
  console.log('‚ùå Composant LanguageSelector non trouv√©');
}

console.log('\nüìã 3. V√âRIFICATION DU COMPOSANT AUTHLAYOUT');
console.log('------------------------------------------------------------');

const authLayoutPath = 'src/features/auth/components/AuthLayout.tsx';
if (fs.existsSync(authLayoutPath)) {
  const authContent = fs.readFileSync(authLayoutPath, 'utf8');
  
  console.log('‚úÖ Composant AuthLayout trouv√©');
  
  // V√©rifier import LanguageSelector
  if (authContent.includes("import LanguageSelector")) {
    console.log('‚úÖ LanguageSelector import√© dans AuthLayout');
  } else {
    console.log('‚ùå LanguageSelector non import√© dans AuthLayout');
  }
  
  // V√©rifier utilisation LanguageSelector
  if (authContent.includes('<LanguageSelector')) {
    console.log('‚úÖ LanguageSelector utilis√© dans AuthLayout');
  } else {
    console.log('‚ùå LanguageSelector non utilis√© dans AuthLayout');
  }
  
  // V√©rifier useTranslation avec namespace auth
  if (authContent.includes("useTranslation('auth')")) {
    console.log('‚úÖ useTranslation avec namespace "auth"');
  } else {
    console.log('‚ùå useTranslation sans namespace "auth" ou manquant');
  }
  
  // V√©rifier si il y a un useEffect pour √©couter les changements
  if (authContent.includes('useEffect') && authContent.includes('i18n')) {
    console.log('‚úÖ useEffect pour √©couter les changements de langue');
  } else {
    console.log('‚ö†Ô∏è  Pas de useEffect pour √©couter les changements (peut causer le probl√®me)');
  }
  
} else {
  console.log('‚ùå Composant AuthLayout non trouv√©');
}

console.log('\nüìã 4. V√âRIFICATION DES FICHIERS DE TRADUCTION AUTH');
console.log('------------------------------------------------------------');

const languages = ['fr', 'en', 'ar', 'es', 'pt', 'tr'];
let authFilesOk = true;

languages.forEach(lang => {
  const authFilePath = `public/locales/${lang}/auth.json`;
  if (fs.existsSync(authFilePath)) {
    try {
      const authContent = JSON.parse(fs.readFileSync(authFilePath, 'utf8'));
      const keys = Object.keys(authContent);
      console.log(`‚úÖ ${lang}/auth.json - ${keys.length} cl√©s de traduction`);
      
      // V√©rifier quelques cl√©s importantes
      if (authContent.login || authContent.register || authContent.email) {
        console.log(`   ‚úÖ Cl√©s de base pr√©sentes`);
      } else {
        console.log(`   ‚ö†Ô∏è  Cl√©s de base manquantes`);
      }
    } catch (e) {
      console.log(`‚ùå ${lang}/auth.json - Erreur de parsing JSON`);
      authFilesOk = false;
    }
  } else {
    console.log(`‚ùå ${lang}/auth.json manquant`);
    authFilesOk = false;
  }
});

console.log('\nüìã 5. V√âRIFICATION DES PAGES D\'AUTHENTIFICATION');
console.log('------------------------------------------------------------');

// V√©rifier LoginPage
const loginPagePath = 'src/features/auth/pages/LoginPage.tsx';
if (fs.existsSync(loginPagePath)) {
  const loginContent = fs.readFileSync(loginPagePath, 'utf8');
  if (loginContent.includes('<AuthLayout')) {
    console.log('‚úÖ LoginPage utilise AuthLayout');
  } else {
    console.log('‚ùå LoginPage n\'utilise pas AuthLayout');
  }
} else {
  console.log('‚ö†Ô∏è  LoginPage.tsx non trouv√©');
}

// V√©rifier RegisterPage
const registerPagePath = 'src/features/auth/pages/RegisterPage.tsx';
if (fs.existsSync(registerPagePath)) {
  const registerContent = fs.readFileSync(registerPagePath, 'utf8');
  if (registerContent.includes('<AuthLayout')) {
    console.log('‚úÖ RegisterPage utilise AuthLayout');
  } else {
    console.log('‚ùå RegisterPage n\'utilise pas AuthLayout');
  }
} else {
  console.log('‚ö†Ô∏è  RegisterPage.tsx non trouv√©');
}

console.log('\nüìã 6. ANALYSE DES PROBL√àMES POTENTIELS');
console.log('------------------------------------------------------------');

// Analyser les probl√®mes potentiels
const problems = [];
const solutions = [];

// V√©rifier useSuspense
const i18nContent = fs.existsSync(i18nPath) ? fs.readFileSync(i18nPath, 'utf8') : '';
if (i18nContent.includes('useSuspense: true')) {
  problems.push('useSuspense: true peut emp√™cher le re-render des composants');
  solutions.push('D√©sactiver useSuspense ou ajouter un useEffect dans AuthLayout');
}

// V√©rifier si AuthLayout √©coute les changements
const authContent = fs.existsSync(authLayoutPath) ? fs.readFileSync(authLayoutPath, 'utf8') : '';
if (!authContent.includes('useEffect') || !authContent.includes('i18n')) {
  problems.push('AuthLayout ne r√©√©coute pas les changements de langue');
  solutions.push('Ajouter un useEffect qui √©coute les √©v√©nements languageChanged');
}

// V√©rifier la configuration de d√©tection
if (!i18nContent.includes("order: ['localStorage'")) {
  problems.push('Ordre de d√©tection des langues peut √™tre probl√©matique');
  solutions.push('Prioriser localStorage dans l\'ordre de d√©tection');
}

console.log('\nüîç PROBL√àMES IDENTIFI√âS:');
if (problems.length === 0) {
  console.log('‚úÖ Aucun probl√®me √©vident d√©tect√© dans la configuration');
} else {
  problems.forEach((problem, index) => {
    console.log(`${index + 1}. ‚ùå ${problem}`);
  });
}

console.log('\nüí° SOLUTIONS RECOMMAND√âES:');
if (solutions.length === 0) {
  console.log('‚úÖ Aucune solution sp√©cifique n√©cessaire');
} else {
  solutions.forEach((solution, index) => {
    console.log(`${index + 1}. üîß ${solution}`);
  });
}

console.log('\nüìã 7. SCRIPT DE TEST MANUEL');
console.log('------------------------------------------------------------');
console.log('Pour tester manuellement dans la console du navigateur:');
console.log('');
console.log('// 1. V√©rifier l\'√©tat actuel');
console.log('console.log("Langue actuelle:", window.i18n?.language);');
console.log('console.log("localStorage:", localStorage.getItem("beauty-flow-language"));');
console.log('');
console.log('// 2. Tester le changement de langue');
console.log('window.i18n?.changeLanguage("en").then(() => {');
console.log('  console.log("Changement vers EN:", window.i18n.language);');
console.log('});');
console.log('');
console.log('// 3. V√©rifier les traductions');
console.log('console.log("Traduction test:", window.i18n?.t("auth:login"));');

console.log('\n============================================================');
console.log('üéØ DIAGNOSTIC TERMIN√â');
console.log('============================================================');

// R√©sum√© final
const totalChecks = 10; // Nombre approximatif de v√©rifications
let passedChecks = 0;

if (fs.existsSync(i18nPath)) passedChecks++;
if (fs.existsSync(languageSelectorPath)) passedChecks++;
if (fs.existsSync(authLayoutPath)) passedChecks++;
if (authFilesOk) passedChecks += 2;

console.log(`\nüìä Score de sant√©: ${passedChecks}/${totalChecks} v√©rifications pass√©es`);

if (problems.length > 0) {
  console.log('\nüö® ACTION REQUISE: Des probl√®mes ont √©t√© identifi√©s et doivent √™tre corrig√©s.');
  console.log('üìù Consultez les solutions recommand√©es ci-dessus.');
} else {
  console.log('\n‚úÖ Configuration semble correcte. Le probl√®me peut √™tre plus subtil.');
  console.log('üîç Utilisez le script de test manuel dans la console du navigateur.');
}

console.log('\nüîß Prochaines √©tapes recommand√©es:');
console.log('1. Corriger les probl√®mes identifi√©s');
console.log('2. Tester dans le navigateur avec le script manuel');
console.log('3. V√©rifier les logs de la console pour les erreurs');
console.log('4. Appliquer les corrections sp√©cifiques si n√©cessaire');
