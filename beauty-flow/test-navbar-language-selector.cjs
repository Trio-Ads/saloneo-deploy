const fs = require('fs');
const path = require('path');

console.log('üß™ Test du NavbarLanguageSelector...\n');

// V√©rifier que le composant existe
const navbarSelectorPath = path.join(__dirname, 'src/components/NavbarLanguageSelector.tsx');
if (!fs.existsSync(navbarSelectorPath)) {
  console.error('‚ùå NavbarLanguageSelector.tsx non trouv√©');
  process.exit(1);
}

const navbarSelectorContent = fs.readFileSync(navbarSelectorPath, 'utf8');

// Tests du contenu
const tests = [
  {
    name: 'Import de createPortal',
    check: () => navbarSelectorContent.includes("import { createPortal } from 'react-dom';"),
    fix: 'Ajouter: import { createPortal } from \'react-dom\';'
  },
  {
    name: 'Import de useTranslation',
    check: () => navbarSelectorContent.includes("import { useTranslation } from 'react-i18next';"),
    fix: 'Ajouter: import { useTranslation } from \'react-i18next\';'
  },
  {
    name: 'Hook i18n',
    check: () => navbarSelectorContent.includes('const { i18n } = useTranslation();'),
    fix: 'Ajouter: const { i18n } = useTranslation();'
  },
  {
    name: 'Fonction handleLanguageChange',
    check: () => navbarSelectorContent.includes('const handleLanguageChange = (languageCode: string) => {'),
    fix: 'Ajouter la fonction handleLanguageChange'
  },
  {
    name: 'Appel i18n.changeLanguage',
    check: () => navbarSelectorContent.includes('i18n.changeLanguage(languageCode)'),
    fix: 'Ajouter l\'appel √† i18n.changeLanguage'
  },
  {
    name: 'Listener languageChanged',
    check: () => navbarSelectorContent.includes("i18n.on('languageChanged', handleLanguageChanged);"),
    fix: 'Ajouter le listener pour languageChanged'
  },
  {
    name: 'createPortal utilis√©',
    check: () => navbarSelectorContent.includes('createPortal('),
    fix: 'Utiliser createPortal pour le dropdown'
  },
  {
    name: 'Logs de debug',
    check: () => navbarSelectorContent.includes('console.log('),
    fix: 'Ajouter des logs de debug'
  },
  {
    name: '6 langues d√©finies',
    check: () => {
      const matches = navbarSelectorContent.match(/code: '[a-z]{2}'/g);
      return matches && matches.length === 6;
    },
    fix: 'D√©finir les 6 langues: fr, en, ar, es, pt, tr'
  },
  {
    name: 'Bouton avec ref',
    check: () => navbarSelectorContent.includes('ref={buttonRef}'),
    fix: 'Ajouter ref={buttonRef} au bouton'
  }
];

let passed = 0;
let failed = 0;

tests.forEach(test => {
  if (test.check()) {
    console.log(`‚úÖ ${test.name}`);
    passed++;
  } else {
    console.log(`‚ùå ${test.name}`);
    console.log(`   üí° ${test.fix}`);
    failed++;
  }
});

console.log(`\nüìä R√©sultats: ${passed} r√©ussis, ${failed} √©chou√©s`);

// V√©rifier l'int√©gration dans MainLayout
const mainLayoutPath = path.join(__dirname, 'src/layouts/MainLayout.tsx');
if (fs.existsSync(mainLayoutPath)) {
  const mainLayoutContent = fs.readFileSync(mainLayoutPath, 'utf8');
  
  console.log('\nüîç V√©rification de l\'int√©gration dans MainLayout:');
  
  if (mainLayoutContent.includes("import NavbarLanguageSelector from '../components/NavbarLanguageSelector';")) {
    console.log('‚úÖ Import de NavbarLanguageSelector');
  } else {
    console.log('‚ùå Import de NavbarLanguageSelector manquant');
  }
  
  if (mainLayoutContent.includes('<NavbarLanguageSelector />')) {
    console.log('‚úÖ Utilisation de NavbarLanguageSelector');
  } else {
    console.log('‚ùå NavbarLanguageSelector non utilis√©');
  }
}

// V√©rifier la configuration i18n
const i18nPath = path.join(__dirname, 'src/i18n.ts');
if (fs.existsSync(i18nPath)) {
  const i18nContent = fs.readFileSync(i18nPath, 'utf8');
  
  console.log('\nüîç V√©rification de la configuration i18n:');
  
  if (i18nContent.includes("supportedLngs: ['fr', 'en', 'ar', 'es', 'tr', 'pt']")) {
    console.log('‚úÖ Langues support√©es configur√©es');
  } else {
    console.log('‚ùå Configuration des langues support√©es');
  }
  
  if (i18nContent.includes('debug: process.env.NODE_ENV === \'development\'')) {
    console.log('‚úÖ Mode debug activ√© en d√©veloppement');
  } else {
    console.log('‚ùå Mode debug non configur√©');
  }
}

console.log('\nüéØ Instructions de test:');
console.log('1. Ouvrir la console du navigateur');
console.log('2. Cliquer sur le s√©lecteur de langue dans la navbar');
console.log('3. Choisir une langue diff√©rente');
console.log('4. V√©rifier les logs dans la console');
console.log('5. V√©rifier que l\'interface change de langue');

if (failed === 0) {
  console.log('\nüéâ Tous les tests sont pass√©s ! Le NavbarLanguageSelector devrait fonctionner.');
} else {
  console.log(`\n‚ö†Ô∏è  ${failed} test(s) √©chou√©(s). Corriger les probl√®mes avant de tester.`);
}
