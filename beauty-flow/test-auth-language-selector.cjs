const fs = require('fs');
const path = require('path');

console.log('üîç Test du s√©lecteur de langue dans les pages d\'authentification...\n');

// V√©rifier que AuthLayout importe LanguageSelector
const authLayoutPath = 'src/features/auth/components/AuthLayout.tsx';
const authLayoutContent = fs.readFileSync(authLayoutPath, 'utf8');

console.log('üìÑ V√©rification de AuthLayout.tsx:');

// V√©rifier l'import
if (authLayoutContent.includes("import LanguageSelector from '../../../components/LanguageSelector';")) {
  console.log('  ‚úÖ Import LanguageSelector pr√©sent');
} else {
  console.log('  ‚ùå Import LanguageSelector manquant');
}

// V√©rifier l'utilisation du composant
if (authLayoutContent.includes('<LanguageSelector compact={true} showLabel={false} />')) {
  console.log('  ‚úÖ Composant LanguageSelector utilis√© avec les bonnes props');
} else {
  console.log('  ‚ùå Composant LanguageSelector non utilis√© ou props incorrectes');
}

// V√©rifier la div container
if (authLayoutContent.includes('<div className="auth-language-selector">')) {
  console.log('  ‚úÖ Container auth-language-selector pr√©sent');
} else {
  console.log('  ‚ùå Container auth-language-selector manquant');
}

// V√©rifier les styles CSS
if (authLayoutContent.includes('.auth-language-selector {')) {
  console.log('  ‚úÖ Styles CSS pour auth-language-selector pr√©sents');
} else {
  console.log('  ‚ùå Styles CSS pour auth-language-selector manquants');
}

// V√©rifier les styles responsive
if (authLayoutContent.includes('@media (max-width: 640px)') && 
    authLayoutContent.includes('.auth-language-selector {')) {
  console.log('  ‚úÖ Styles responsive pr√©sents');
} else {
  console.log('  ‚ùå Styles responsive manquants');
}

// V√©rifier les styles glassmorphism
if (authLayoutContent.includes('backdrop-filter: blur(10px)') && 
    authLayoutContent.includes('rgba(255, 255, 255, 0.1)')) {
  console.log('  ‚úÖ Styles glassmorphism appliqu√©s');
} else {
  console.log('  ‚ùå Styles glassmorphism manquants');
}

console.log('\nüìÑ V√©rification des pages d\'authentification:');

// V√©rifier LoginPage
const loginPagePath = 'src/features/auth/pages/LoginPage.tsx';
if (fs.existsSync(loginPagePath)) {
  const loginContent = fs.readFileSync(loginPagePath, 'utf8');
  if (loginContent.includes('<AuthLayout')) {
    console.log('  ‚úÖ LoginPage utilise AuthLayout (s√©lecteur automatiquement disponible)');
  } else {
    console.log('  ‚ùå LoginPage n\'utilise pas AuthLayout');
  }
} else {
  console.log('  ‚ùå LoginPage.tsx non trouv√©');
}

// V√©rifier RegisterPage
const registerPagePath = 'src/features/auth/pages/RegisterPage.tsx';
if (fs.existsSync(registerPagePath)) {
  const registerContent = fs.readFileSync(registerPagePath, 'utf8');
  if (registerContent.includes('<AuthLayout')) {
    console.log('  ‚úÖ RegisterPage utilise AuthLayout (s√©lecteur automatiquement disponible)');
  } else {
    console.log('  ‚ùå RegisterPage n\'utilise pas AuthLayout');
  }
} else {
  console.log('  ‚ùå RegisterPage.tsx non trouv√©');
}

console.log('\nüåç V√©rification des fichiers de traduction auth:');

const languages = ['fr', 'en', 'ar', 'es', 'pt', 'tr'];
let allAuthFilesExist = true;

languages.forEach(lang => {
  const authFilePath = `public/locales/${lang}/auth.json`;
  if (fs.existsSync(authFilePath)) {
    console.log(`  ‚úÖ ${lang}/auth.json existe`);
  } else {
    console.log(`  ‚ùå ${lang}/auth.json manquant`);
    allAuthFilesExist = false;
  }
});

console.log('\nüé® V√©rification des fonctionnalit√©s du design:');

// V√©rifier les animations
if (authLayoutContent.includes('animation: fadeIn') && 
    authLayoutContent.includes('@keyframes fadeIn')) {
  console.log('  ‚úÖ Animations CSS pr√©sentes');
} else {
  console.log('  ‚ùå Animations CSS manquantes');
}

// V√©rifier le positionnement
if (authLayoutContent.includes('position: absolute') && 
    authLayoutContent.includes('top: 1.5rem') && 
    authLayoutContent.includes('right: 1.5rem')) {
  console.log('  ‚úÖ Positionnement en haut √† droite configur√©');
} else {
  console.log('  ‚ùå Positionnement incorrect');
}

// V√©rifier le z-index
if (authLayoutContent.includes('z-index: 10')) {
  console.log('  ‚úÖ Z-index √©lev√© pour √™tre au-dessus des effets');
} else {
  console.log('  ‚ùå Z-index non configur√©');
}

console.log('\n============================================================');
console.log('üìä R√âSUM√â DE L\'INT√âGRATION DU S√âLECTEUR DE LANGUE');
console.log('============================================================');

const checks = [
  authLayoutContent.includes("import LanguageSelector"),
  authLayoutContent.includes('<LanguageSelector compact={true}'),
  authLayoutContent.includes('auth-language-selector'),
  authLayoutContent.includes('.auth-language-selector {'),
  authLayoutContent.includes('@media (max-width: 640px)'),
  allAuthFilesExist
];

const passedChecks = checks.filter(Boolean).length;
const totalChecks = checks.length;

console.log(`‚úÖ Tests r√©ussis: ${passedChecks}/${totalChecks}`);

if (passedChecks === totalChecks) {
  console.log('\nüéâ SUCC√àS ! Le s√©lecteur de langue est correctement int√©gr√© dans AuthLayout !');
  console.log('‚úÖ Disponible automatiquement sur les pages Login et Register');
  console.log('‚úÖ Design glassmorphism coh√©rent avec le th√®me');
  console.log('‚úÖ Responsive et adapt√© mobile');
  console.log('‚úÖ Support des 6 langues (FR, EN, AR, ES, PT, TR)');
  console.log('‚úÖ Positionnement optimal en haut √† droite');
} else {
  console.log('\n‚ö†Ô∏è  Quelques v√©rifications ont √©chou√©. V√©rifiez les d√©tails ci-dessus.');
}

console.log('\nüöÄ Le s√©lecteur de langue est maintenant disponible sur toutes les pages d\'authentification !');
console.log('============================================================');
