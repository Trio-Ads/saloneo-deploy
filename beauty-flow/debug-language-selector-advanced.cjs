const fs = require('fs');

console.log('üîç DIAGNOSTIC AVANC√â DU S√âLECTEUR DE LANGUE');
console.log('============================================================\n');

console.log('üìã 1. V√âRIFICATION DU COMPOSANT LANGUAGESELECTOR');
console.log('------------------------------------------------------------');

const languageSelectorPath = 'src/components/LanguageSelector.tsx';
if (fs.existsSync(languageSelectorPath)) {
  const selectorContent = fs.readFileSync(languageSelectorPath, 'utf8');
  
  console.log('‚úÖ Composant LanguageSelector trouv√©');
  
  // V√©rifier la fonction handleLanguageChange
  if (selectorContent.includes('handleLanguageChange')) {
    console.log('‚úÖ Fonction handleLanguageChange pr√©sente');
    
    // V√©rifier si elle appelle i18n.changeLanguage
    if (selectorContent.includes('i18n.changeLanguage(languageCode)')) {
      console.log('‚úÖ Appel √† i18n.changeLanguage(languageCode)');
    } else if (selectorContent.includes('i18n.changeLanguage')) {
      console.log('‚ö†Ô∏è  Appel √† i18n.changeLanguage pr√©sent mais syntaxe diff√©rente');
    } else {
      console.log('‚ùå Pas d\'appel √† i18n.changeLanguage');
    }
  } else {
    console.log('‚ùå Fonction handleLanguageChange manquante');
  }
  
  // V√©rifier les √©v√©nements onClick
  if (selectorContent.includes('onClick={() => handleLanguageChange(')) {
    console.log('‚úÖ √âv√©nement onClick configur√© avec handleLanguageChange');
  } else if (selectorContent.includes('onClick={')) {
    console.log('‚ö†Ô∏è  √âv√©nement onClick pr√©sent mais syntaxe diff√©rente');
  } else {
    console.log('‚ùå √âv√©nement onClick manquant');
  }
  
  // V√©rifier la d√©tection de la langue courante
  if (selectorContent.includes('i18n.language')) {
    console.log('‚úÖ D√©tection de la langue courante via i18n.language');
  } else {
    console.log('‚ùå D√©tection de la langue courante manquante');
  }
  
  // V√©rifier la fermeture du dropdown
  if (selectorContent.includes('setIsOpen(false)')) {
    console.log('‚úÖ Fermeture du dropdown configur√©e');
  } else {
    console.log('‚ùå Fermeture du dropdown manquante');
  }
  
} else {
  console.log('‚ùå Composant LanguageSelector non trouv√©');
}

console.log('\nüìã 2. V√âRIFICATION DE L\'INITIALISATION I18N');
console.log('------------------------------------------------------------');

// V√©rifier App.tsx pour l'initialisation
const appPath = 'src/App.tsx';
if (fs.existsSync(appPath)) {
  const appContent = fs.readFileSync(appPath, 'utf8');
  
  if (appContent.includes('import i18n') || appContent.includes('import \'./i18n\'')) {
    console.log('‚úÖ i18n import√© dans App.tsx');
  } else {
    console.log('‚ùå i18n non import√© dans App.tsx');
  }
} else {
  console.log('‚ùå App.tsx non trouv√©');
}

// V√©rifier main.tsx pour l'initialisation
const mainPath = 'src/main.tsx';
if (fs.existsSync(mainPath)) {
  const mainContent = fs.readFileSync(mainPath, 'utf8');
  
  if (mainContent.includes('import i18n') || mainContent.includes('import \'./i18n\'')) {
    console.log('‚úÖ i18n import√© dans main.tsx');
  } else {
    console.log('‚ùå i18n non import√© dans main.tsx');
  }
} else {
  console.log('‚ùå main.tsx non trouv√©');
}

console.log('\nüìã 3. V√âRIFICATION DES FICHIERS DE TRADUCTION AUTH');
console.log('------------------------------------------------------------');

const languages = ['fr', 'en', 'ar', 'es', 'pt', 'tr'];
languages.forEach(lang => {
  const authFilePath = `public/locales/${lang}/auth.json`;
  if (fs.existsSync(authFilePath)) {
    try {
      const authContent = JSON.parse(fs.readFileSync(authFilePath, 'utf8'));
      console.log(`‚úÖ ${lang}/auth.json - ${Object.keys(authContent).length} cl√©s`);
      
      // V√©rifier quelques cl√©s sp√©cifiques
      if (authContent.login) {
        console.log(`   ‚úÖ Cl√© "login": "${authContent.login}"`);
      }
      if (authContent.register) {
        console.log(`   ‚úÖ Cl√© "register": "${authContent.register}"`);
      }
    } catch (e) {
      console.log(`‚ùå ${lang}/auth.json - Erreur JSON: ${e.message}`);
    }
  } else {
    console.log(`‚ùå ${lang}/auth.json manquant`);
  }
});

console.log('\nüìã 4. ANALYSE DU PROBL√àME POTENTIEL');
console.log('------------------------------------------------------------');

// Analyser le composant LanguageSelector en d√©tail
if (fs.existsSync(languageSelectorPath)) {
  const selectorContent = fs.readFileSync(languageSelectorPath, 'utf8');
  
  console.log('üîç Analyse d√©taill√©e du LanguageSelector:');
  
  // V√©rifier si le composant utilise useTranslation correctement
  if (selectorContent.includes('const { i18n } = useTranslation()')) {
    console.log('‚úÖ useTranslation() utilis√© correctement');
  } else if (selectorContent.includes('useTranslation')) {
    console.log('‚ö†Ô∏è  useTranslation utilis√© mais syntaxe diff√©rente');
  } else {
    console.log('‚ùå useTranslation non utilis√©');
  }
  
  // V√©rifier la version compacte
  if (selectorContent.includes('compact')) {
    console.log('‚úÖ Version compacte support√©e');
  } else {
    console.log('‚ùå Version compacte non support√©e');
  }
  
  // V√©rifier les props
  if (selectorContent.includes('LanguageSelectorProps')) {
    console.log('‚úÖ Interface LanguageSelectorProps d√©finie');
  } else {
    console.log('‚ùå Interface LanguageSelectorProps manquante');
  }
}

console.log('\nüìã 5. SCRIPT DE D√âBOGAGE POUR LE NAVIGATEUR');
console.log('------------------------------------------------------------');

console.log('Copiez ce script dans la console du navigateur pour d√©boguer:');
console.log('');
console.log('// === SCRIPT DE D√âBOGAGE COMPLET ===');
console.log('');
console.log('// 1. V√©rifier l\'√©tat de i18n');
console.log('console.log("=== √âTAT I18N ===");');
console.log('console.log("i18n disponible:", !!window.i18n);');
console.log('console.log("Langue actuelle:", window.i18n?.language);');
console.log('console.log("Langues support√©es:", window.i18n?.options?.supportedLngs);');
console.log('console.log("localStorage:", localStorage.getItem("beauty-flow-language"));');
console.log('');
console.log('// 2. Tester le changement de langue');
console.log('console.log("=== TEST CHANGEMENT ===");');
console.log('if (window.i18n) {');
console.log('  window.i18n.changeLanguage("en").then(() => {');
console.log('    console.log("Changement vers EN r√©ussi:", window.i18n.language);');
console.log('    console.log("localStorage apr√®s:", localStorage.getItem("beauty-flow-language"));');
console.log('  }).catch(err => {');
console.log('    console.error("Erreur changement:", err);');
console.log('  });');
console.log('} else {');
console.log('  console.error("i18n non disponible!");');
console.log('}');
console.log('');
console.log('// 3. V√©rifier les traductions');
console.log('console.log("=== TEST TRADUCTIONS ===");');
console.log('if (window.i18n) {');
console.log('  console.log("Traduction FR:", window.i18n.t("auth:login"));');
console.log('  window.i18n.changeLanguage("en");');
console.log('  setTimeout(() => {');
console.log('    console.log("Traduction EN:", window.i18n.t("auth:login"));');
console.log('  }, 100);');
console.log('}');
console.log('');
console.log('// 4. V√©rifier les √©v√©nements');
console.log('console.log("=== TEST √âV√âNEMENTS ===");');
console.log('if (window.i18n) {');
console.log('  window.i18n.on("languageChanged", (lng) => {');
console.log('    console.log("√âv√©nement languageChanged d√©clench√©:", lng);');
console.log('  });');
console.log('  window.i18n.changeLanguage("es");');
console.log('}');

console.log('\nüìã 6. SOLUTIONS POSSIBLES');
console.log('------------------------------------------------------------');

console.log('Si le probl√®me persiste, essayez ces solutions:');
console.log('');
console.log('1. üîÑ RED√âMARRER LE SERVEUR:');
console.log('   - Arr√™ter npm run dev (Ctrl+C)');
console.log('   - Relancer npm run dev');
console.log('   - Vider le cache du navigateur (Ctrl+Shift+R)');
console.log('');
console.log('2. üßπ NETTOYER LE CACHE:');
console.log('   - localStorage.clear() dans la console');
console.log('   - Supprimer les cookies du site');
console.log('   - Mode navigation priv√©e');
console.log('');
console.log('3. üîß V√âRIFICATIONS SUPPL√âMENTAIRES:');
console.log('   - Ouvrir les DevTools (F12)');
console.log('   - Onglet Console pour voir les erreurs');
console.log('   - Onglet Network pour voir si les fichiers JSON se chargent');
console.log('   - Onglet Application > Local Storage');

console.log('\n============================================================');
console.log('üéØ PROCHAINES √âTAPES');
console.log('============================================================');

console.log('1. Ex√©cuter le script de d√©bogage dans le navigateur');
console.log('2. V√©rifier les erreurs dans la console');
console.log('3. Tester le changement manuel via window.i18n.changeLanguage()');
console.log('4. Si √ßa ne marche toujours pas, il faut modifier le composant');
console.log('5. Red√©marrer compl√®tement le serveur de d√©veloppement');

console.log('\n============================================================');
