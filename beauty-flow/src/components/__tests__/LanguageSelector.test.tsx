import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import LanguageSelector from '../LanguageSelector';

// Mock pour i18next
const mockChangeLanguage = vi.fn().mockResolvedValue(undefined);
vi.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => key,
    i18n: {
      changeLanguage: mockChangeLanguage,
      language: 'fr',
    },
  }),
}));

describe('LanguageSelector', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders correctly with default language', () => {
    render(<LanguageSelector />);
    
    // VÃ©rifier que le bouton avec le drapeau franÃ§ais est affichÃ©
    expect(screen.getByText('ðŸ‡«ðŸ‡·')).toBeInTheDocument();
    expect(screen.getByText('FranÃ§ais')).toBeInTheDocument();
  });

  it('opens language dropdown when clicked', () => {
    render(<LanguageSelector />);
    
    // Cliquer sur le sÃ©lecteur de langue
    fireEvent.click(screen.getByText('FranÃ§ais'));
    
    // VÃ©rifier que toutes les langues sont affichÃ©es
    expect(screen.getByText('English')).toBeInTheDocument();
    expect(screen.getByText('Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©')).toBeInTheDocument();
    expect(screen.getByText('EspaÃ±ol')).toBeInTheDocument();
    expect(screen.getByText('TÃ¼rkÃ§e')).toBeInTheDocument();
    expect(screen.getByText('PortuguÃªs')).toBeInTheDocument();
  });

  it('changes language when a language is selected', async () => {
    const onLanguageChange = vi.fn();
    render(<LanguageSelector onLanguageChange={onLanguageChange} />);
    
    // Ouvrir le dropdown
    fireEvent.click(screen.getByText('FranÃ§ais'));
    
    // SÃ©lectionner l'anglais
    fireEvent.click(screen.getByText('English'));
    
    // VÃ©rifier que la fonction changeLanguage a Ã©tÃ© appelÃ©e avec 'en'
    expect(mockChangeLanguage).toHaveBeenCalledWith('en');
    
    // Attendre que la promesse soit rÃ©solue
    await waitFor(() => {
      expect(onLanguageChange).toHaveBeenCalledWith('en');
    });
  });

  it('uses currentLanguage prop when provided', () => {
    render(<LanguageSelector currentLanguage="en" />);
    
    // VÃ©rifier que le bouton avec le drapeau anglais est affichÃ©
    expect(screen.getByText('ðŸ‡¬ðŸ‡§')).toBeInTheDocument();
    expect(screen.getByText('English')).toBeInTheDocument();
  });
});
